version: "3.8"

services:
  config-service:
    image: config-service:latest
    container_name: config-service
    build:
      context: .
      dockerfile: microservices/config-service/Dockerfile
    ports:
      - "8888:8888"
    env_file:
      - microservices/config-service/.env
    networks:
      - backend-network
    restart: always

  user-service:
    image: user-service:latest
    container_name: user-service
    build:
      context: .
      dockerfile: microservices/user-service/Dockerfile
    ports:
      - "8080:${USER_SERVICE_PORT}"
    env_file:
      - microservices/user-service/.env
    depends_on:
      - user-postgres
      - kafka
      - zookeeper
      - config-service
    networks:
      - backend-network
    restart: always

  auth-service:
    image: auth-service:latest
    container_name: auth-service
    build:
      context: .
      dockerfile: microservices/auth-service/Dockerfile
    ports:
      - "8081:${AUTH_SERVICE_PORT}"
    env_file:
      - microservices/auth-service/.env
    depends_on:
      - kafka
      - zookeeper
    networks:
      - backend-network
    restart: always

  user-postgres:
    image: postgres:17.2
    container_name: user-postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:${USER_POSTGRES_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${USER_POSTGRES_DB}
    env_file:
      - microservices/user-service/.env
    networks:
      - backend-network
    restart: always

  redis:
    image: redis:7.4.0-alpine
    container_name: redis
    ports:
      - "6379:${REDIS_PORT}"
    restart: always
    networks:
      - backend-network
    volumes:
      - redis-data:/data

  minio:
    image: minio/minio:latest
    container_name: minio
    entrypoint: /bin/sh -c "
      minio server /data --console-address ':9001' &
      until curl -s http://localhost:9000/minio/health/live; do sleep 1; done &&
      mc alias set local http://localhost:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb local/${MINIO_BUCKET} || true;
      wait "
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    networks:
      - backend-network
    volumes:
      - minio-data:/data
    env_file: .env

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list" ]
      interval: 5s
      timeout: 10s
      retries: 10

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/microservices.conf:/etc/nginx/conf.d/default.conf:ro,z
    depends_on:
      - auth-service
      - user-service
      - config-service
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local